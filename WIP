import discord
import random
import asyncio

# Define intents
intents = discord.Intents.default()
intents.message_content = True

# Create a Discord client with intents
client = discord.Client(intents=intents)

# Global variables to track players who joined
players = set()

@client.event
async def on_ready():
    print('Logged in as', client.user)
    print('------')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('!rps'):
        await play_game(message)

async def play_game(message):
    global players
    players.clear()  # Clear the set of players

    # Ask others to join within 30 seconds
    await message.channel.send("Anyone else wants to join? React with any emoji within 30 seconds.")

    def check_join(reaction, user):
        return user != client.user and reaction.message.id == message.id

    try:
        # Wait for others to join within 30 seconds
        while True:
            reaction, user = await client.wait_for('reaction_add', timeout=30, check=check_join)
            players.add(user)
    except asyncio.TimeoutError:
        pass

    # Post message with reactions
    question_message = await message.channel.send("Rock 🪨, Paper 📄, or Scissors ✂️?")
    for emoji in ['🪨', '📄', '✂️']:
        await question_message.add_reaction(emoji)

    # Define check function for reaction
    def check(reaction, user):
        return user in players and str(reaction.emoji) in ['🪨', '📄', '✂️'] and reaction.message.id == question_message.id

    try:
        # Wait for user to choose with 60 second timeout
        reaction, user = await client.wait_for('reaction_add', timeout=60, check=check)
        player_choice = await emoji_to_choice(reaction.emoji)
        computer_choice = random.choice(["rock", "paper", "scissors"])
        await message.channel.send(f"{user.name} has made a choice!")
        await display_winner(player_choice, computer_choice, message.channel)
    except asyncio.TimeoutError:
        await message.channel.send("Time's up! You didn't make a choice.")

    # Ask to play again
    play_again_message = await message.channel.send("Do you want to play again?")
    await play_again_message.add_reaction('✅')  # Yes emoji
    await play_again_message.add_reaction('❌')  # No emoji

    def check_reaction(reaction, user):
        return user == message.author and str(reaction.emoji) in ['✅', '❌'] and reaction.message.id == play_again_message.id

    try:
        reaction, _ = await client.wait_for('reaction_add', timeout=30, check=check_reaction)
        if str(reaction.emoji) == '✅':
            await play_game(message)  # Start a new game
        else:
            await message.channel.send("Thanks for playing!")
    except asyncio.TimeoutError:
        await message.channel.send("Timeout! Thanks for playing!")

async def emoji_to_choice(emoji):
    if emoji == '🪨':
        return 'rock'
    elif emoji == '📄':
        return 'paper'
    elif emoji == '✂️':
        return 'scissors'
    else:
        return None

async def display_winner(player_choice, computer_choice, channel):
    winner = determine_winner(player_choice, computer_choice)
    await channel.send(f"Computer chooses: {computer_choice}\n{winner}")

def determine_winner(player_choice, computer_choice):
    if player_choice == computer_choice:
        return "It's a tie!"
    elif (player_choice == "rock" and computer_choice == "scissors") or \
         (player_choice == "scissors" and computer_choice == "paper") or \
         (player_choice == "paper" and computer_choice == "rock"):
        return "You win!"
    else:
        return "Computer wins!"

# Run the bot with the provided token
client.run('discord')
